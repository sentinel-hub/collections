<div id="leaflet-map"></div>
<script>

    function copyGeojsonOnClick(geometry){
        navigator.clipboard.writeText(JSON.stringify(geometry));
    }

    async function loadData(){
        const polygonsResponse = await fetch("polygons.geojson");
        const geojsonPolygons = polygonsResponse.status === 404 ? null : await polygonsResponse.json();

        return geojsonPolygons;
    }

    function generatePopupText(feature, centroid){
        // replace " with ' so the string can be passed as a function param in HTML
        const encodedString = JSON.stringify(feature.geometry).replace(/"/g, "'");

        /*
            https://apps.sentinel-hub.com/eo-browser/?
            zoom=14&
            lat=44.84178&
            lng=-0.57841&
            themeId=PLANET_SANDBOX&
            visualizationUrl=https%3A%2F%2Fservices.sentinel-hub.com%2Fogc%2Fwms%2F655dfaa9-35e3-4fe1-a8e2-14e4c178f6b9&
            datasetId=9ff30ab7-62c2-4d19-b5ef-83805c7e7602&
            fromTime=2023-03-01T00%3A00%3A00.000Z&
            toTime=2023-03-01T23%3A59%3A59.999Z&
            layerId=ROADS-AND-BUILDINGS&
        */
        // to add
        // - theme id
        // - vis url
        // - dataset id
        // - timespan
        // - layer id
        const EOBstring = `https://apps.sentinel-hub.com/eo-browser/?lat=${centroid.lat}&lng=${centroid.lng}`;

        return "<h4>" + feature.properties.geolocation +"</h4>" +
            "<div>" +
            "Time range: " + feature.properties.from + " to " + feature.properties.to + "<br>" +
            "Area size: " + feature.properties["area_sqkm"] + "km<sup>2</sup><br>" +
            '<button class="leaflet-copy-geojson" onClick="copyGeojsonOnClick('+ encodedString +')">Copy GeoJSON</button>' +
            '<a href="' + EOBstring + '" class="leaflet-copy-geojson" target="_blank">Open in EOB</a>' +
            "</div>";
    }

    function addPolygonsAndMarkersToLeafletMap(geojsonPolygons, leafletMap){
        if(!geojsonPolygons){
            return;
        }

        const customMarker = L.icon({
            iconUrl: '{{rootUrl}}img/map-pin.svg',
            iconSize: [28, 44],
            iconAnchor: [14, 38],
            popupAnchor: [0, -44],
        });

        geojsonPolygons.features.forEach(polygon => {
            const switchedCoords = polygon.geometry.coordinates[0].map(pair => [pair[1], pair[0]]);
            const leafletPolygon = L.polygon(switchedCoords, {color: '#009db1'}).addTo(leafletMap);

            const centroid = leafletPolygon.getCenter();
            const marker = L.marker(centroid, { icon: customMarker }).addTo(leafletMap);

            const popupText = generatePopupText(polygon, centroid);
            leafletPolygon.bindPopup(popupText);
            marker.bindPopup(popupText);
        });
    }

    loadData().then((geojsonPolygons) => {
        // don't render map if no data to show
        if(!geojsonPolygons){
            document.getElementById("leaflet-map").style.height = "0px";
            return;
        }

        // create leaflet map and add OSM base layer
        const leafletMap = L.map('leaflet-map').setView([0, 0], 2);
        L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
            attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
        }).addTo(leafletMap);

        // add geojson polygons and points to the map
        addPolygonsAndMarkersToLeafletMap(geojsonPolygons, leafletMap);
        
    }).catch(e => console.error(e));
    
</script>